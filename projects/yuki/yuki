#!/bin/bash
#This is Yuki. She's here to help.
#Please be patient, she's learning.

#You should add a yes_or_no funtion.
#funtion yes_or_no should accept a string question, and prompt that string with read -p then return 1 for all forms of yes (y,ya,yep,yes) or 0 for all forms of no (n, no, nah)


function main_menu () {
    all_done=0
    while (( !all_done )); do
	echo "Would you like to:"
	echo "chat"
	echo "affirmation"
	echo "math"
	echo "cake"
	echo "leave"
	read -p "Please choose one:" answer
	
	case $answer in
	    chat) have_chat ;;		
	    math) number_loop ;;
	    affirmation) affirmation ;;
	    cake) cake ;;
	    leave) leave ;;
	    *) echo "try again" ;;
	esac
    done
    
}

function number_loop () {
    errors=0
    error_answer="Please return to your class. I hear you're learning how to count today!"
    while [ 1 ]
    do
	read -p "What is your favourite number between 0 and 10?" answer
	case $answer in
	    1) echo "Because you're the best!" ; return 0 ;;
	    2|4|6|8) echo "Even Steven?" ; return 0 ;;
	    3|9) echo "You're an odd one, aren't you?" ; return 0 ;;
	    5) echo "Right in the middle, best of both!" ; return 0 ;;
	    0|10) echo "Of course YOU would choose such a fancy number" ; return 0 ;;
	    7) echo "Feeling lucky, huh?" ; return 0 ;;
            *) echo $error_answer ; ((errors++)) ;;
	esac
	#so "Are you even trying?" should only appear once?
	if [ $errors -eq 3 ]
	then error_answer="Are you even trying?" ;
	fi
	#This should probebly be -eq no point in re-assigning $error_answer each time
	if [ $errors -gt 4 ]
	then error_answer="For the love of... Stop fucking with me, yea?" ;
	fi
    done
}

function have_chat () {
    while [ 1 ]
    do
	read -p "Do you want to know something? [y/n]" answer
	if [[ $answer = y ]] ; then
	    echo "today is $(date '+%A %D') !"
	    #should she say bye if she still talking to them in the main menu?
	    echo "Thanks for talking to me!"
	   return 
	fi
    done
}

function affirmation () {
    echo "All things are for the eventual best"
   #flags fixed They were a test cause I wasn't 100% sure they'd work as one set
    read -n 1 -srp " "
    echo "You've got this"
    read -n 1 -srp " "
    echo "Focus on what you can do"
    echo " You can do anything"
    read -n 1 -srp " "
    echo "You are Smaug"
    read -n 1 -srp " "
    echo "Hakuna Matata"
    echo " It means no worries"
    read -n 1 -srp " "
    echo "Being afraid of things going wrong isn't the way to make things go right"
    echo " You know this"
    read -n 1 -srp " "
    echo "Remember how far you've come, not just how far you have to go. \n You are not where you want to be, but neither are you where you used to \
be"
   
    }

function cake () {
read -p "Do you like cake? [y/n]" answer
if [[ $answer = y ]] ; then
    echo "The cake is a lie"
    echo "$thing2"
    #should this exit or return?
    return main_menu 
else
    echo "The cake is a lie anyway"
    echo "Which do you like?"
    read -p "Pie IceCream Cookies Candy" answer
    case $answer in
	Pie | pie)
	    echo "Pie  is a fantastic choice!" ;;
	Ice | Cream | ice | cream | IceCream | icecream)
	    echo "IceCream is so cold!" ;;
	Cookies | cookies)
	    echo "Anzac, chocolate chip, coconut... There are so many!" ;;
	Candy | candy)
	    echo "Too many varieties of sweets to list, too many to try!" ;;
	*)
	    echo "Is that a dessert?"  ;;
    esac
    # it asks this even if it triggers "Is that a dessert?"
    echo I like $answer6 too!
fi
return
}

function leave () {
    echo "It will be lonely without you here."
    echo "but if you must..."
    read -p "Must you? (y/n)" answer
    if [[ $answer = y ]] ; then
	exit
    else return 
    fi
    }

#these should be hard-coded now.
thing=Hello
thing2=Goodbye
thing3="See you soon!"
# date= $ date

echo "Hello"
echo "My name is Yuki. I'm here to help"
echo "what's your name?"
read $varname
#it would be best to quote this.
echo "it's nice to meet you $varname"
main_menu
#The code will never reach this point.

read -p "Are you leaving me? [y/n]" answer
		 
case $answer in
    y | Y | yes | Yes | Yea | yea | Yeah | yeah | yep | Yep | yup | Yup)
	echo "$thing2"
	exit ;;
    n)
	echo "So you're not leaving?"
	;;
    *)
	echo "Only 'y' or 'n' please."
esac


#    else 
#	echo "I'm glad you stayed."
#	read -p "you should really go though. [y/n]" answer2
#	if [ $answer2 = y ] ; then
#	    echo "$thing3"
#	else
#	    echo "I promise I'll see you again, bye!"
#	    exit
#	fi
 #   fi
